{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","Login.js","signup.js","index.js"],"names":["module","exports","App","class","href","tabindex","aria-disabled","Component","Boolean","window","location","hostname","match","Login","props","check","e","data","state","name","axios","post","headers","then","res","setState","user","catch","error","console","log","message","submit","password","go","setusername","target","value","setpassword","bind","this","className","type","onChange","onClick","Signup","email","setemail","ReactDOM","render","path","exact","component","signup","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f02e9d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nclass App extends Component {\n\n\n\n  render()\n  {\n   return (<div>\n     <h1>Welcome to Todo app. Make list and complete your task</h1>\n     <ul class=\"nav nav-tabs\">\n  <li class=\"nav-item\">\n    <a class=\"nav-link active\" href=\"#\">Active</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"#\">Link</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"#\">Link</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\n  </li>\n</ul>\n   </div>)\n    \n\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from 'axios';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './Login.css'\nclass Login extends Component {\n\n    constructor(props)\n    {\n        super(props);\n        this.state ={\n            name:'',\n            password:'',\n            user:null,\n            go:'no'\n        }\n      //  this.check = this.check.bind(this);\n        this.setusername= this.setusername.bind(this);\n        this.setpassword= this.setpassword.bind(this);\n    }\n    check = (e)=>\n    {\n        \n        const data= \n        {\n            \"username\":this.state.name\n        }\n     axios.post('http://localhost:5000/registers/fin/',\n        data,  {headers:{'Content-Type': 'application/json','Accept': 'application/json'}\n    } ) .then(res => {this.setState({user:res.data});})\n    .catch(function(error){console.log(error.message)});\n    \n    console.log(this.state.user);\n    }\n    submit= () =>\n    {\n       const p=this.state.user.password;\n       if(p==this.state.password)\n       {\n           this.setState({go:'yes'});\n       }\n    }\n   \n    setusername = (e)=>\n    {\n        \n        this.setState({\n            name:e.target.value\n        });\n        //this.check(e);\n    }\n    setpassword = (e) =>\n    {\n        this.setState({\n            password:e.target.value\n        });\n    }\n  render()\n  {\n\n    if(this.state.go=='yes')\n    {\n        return <h1>Login successfully</h1>\n    }\n   return (<div className=\"margin1\"><div className=\"card border-dark mb-3 \">\n        <div class=\"card-header text-center\">\n    <h1>LOGIN</h1>\n  </div>\n           <ul className=\"list-group list-group-flush\">\n     <p >Username:</p>\n     <input className=\"size1\" type=\"text\" onChange={this.setusername} /> \n     <p>Password:</p>\n     <input className=\"size1\" type=\"text\" onChange={this.setpassword} />\n     {this.state.name!='' && this.check(this.state.name)}\n\n\n \n    <button className=\"btn btn-primary size1\" onClick={this.submit} > Submit</button>\n     </ul>\n     \n     </div>\n\n   </div>);\n    \n\n    \n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from 'axios';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nclass Signup extends Component {\n\n    constructor(props)\n    {\n        super(props);\n        this.state ={\n            name:'',\n            password:'',\n            email:'',\n            user:null,\n            go:'no'\n        }\n      //  this.check = this.check.bind(this);\n        this.setusername= this.setusername.bind(this);\n        this.setemail= this.setemail.bind(this);\n        this.setpassword= this.setpassword.bind(this);\n    }\n    check = (e)=>\n    {\n        \n       \n    console.log(this.state.user);\n    }\n    submit= () =>\n    {\n      \n        const data= \n        {\n            \"username\":this.state.name,\n            \"email\":this.state.email,\n            \"password\":this.state.password\n        }\n        console.log(data);\n     axios.post('http://localhost:5000/registers/add/',\n        data,  {headers:{'Content-Type': 'application/json','Accept': 'application/json'}\n    } ) .then(res => {this.setState({user:res.data});})\n    .catch(function(error){console.log(error.message);console.log(\"RR\");});\n    \n           \n    \n    }\n   setemail=(e)=>\n   {\n       this.setState({email:e.target.value});\n   }\n    setusername = (e)=>\n    {\n        \n        this.setState({\n            name:e.target.value\n        });\n        //this.check(e);\n    }\n    setpassword = (e) =>\n    {\n        this.setState({\n            password:e.target.value\n        });\n    }\n  render()\n  {\n      \n\n    if(this.state.go=='yes')\n    {\n        return <h1>Registered successfully</h1>\n    }\n   return (<div>\n     Username:\n     <input type=\"text\" onChange={this.setusername} />  <br></br>\n       <hr></hr> \n       Email\n       <input type=\"text\" onChange={this.setemail} />  <br></br>\n       <hr></hr> \n       password:\n     <input type=\"text\" onChange={this.setpassword} /><br></br><br></br>\n     {this.state.name!='' && this.check(this.state.name)}\n\n\n\n     <button onClick={this.submit} > Submit</button>\n     \n    \n\n   </div>);\n    \n\n    \n  }\n}\n\nexport default Signup;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {BrowserRouter ,Route,Redirect,Switch} from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Login from './Login';\nimport signup from './signup';\n\nReactDOM.render(\n<BrowserRouter>\n   \n    \n   <Switch>\n     <Route path=\"/To-do-app/\" exact component={App} />\n     <Route path='/To-do-app/login/' exact component={Login}></Route> \n     <Route path='/To-do-app/signup/' exact component={signup}></Route> \n   \n \n   \n    </Switch>\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}